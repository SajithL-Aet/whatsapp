{"ast":null,"code":"import { applyMiddleware, createStore, compose } from \"redux\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootReducer from \"./state\";\nimport { watcherSaga } from \"./state/rootSaga\";\n//import { RESET_STATE } from \"./state/user/types\";\n\nconst initialState = {};\nconst persistConfig = {\n  key: \"persist-root\",\n  storage: storage\n};\nconst sagaMiddleware = createSagaMiddleware();\nconst middleware = [sagaMiddleware];\n\n/**\n * Clear store when user successfully signout from the app.\n */\nconst reducer = (state, action) => {\n  if (action.type !== null) {\n    return rootReducer(state, action);\n  } else {\n    return rootReducer(undefined, {});\n  }\n};\n\n/**\n * Persist state in local storage.\n */\nconst persistedReducer = persistReducer(persistConfig, reducer);\nconst store = createStore(persistedReducer, initialState, compose(applyMiddleware(...middleware), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()));\nconst persistor = persistStore(store);\nsagaMiddleware.run(watcherSaga);\nexport default store;\nexport { persistor };","map":{"version":3,"names":["applyMiddleware","createStore","compose","persistStore","persistReducer","storage","createSagaMiddleware","rootReducer","watcherSaga","initialState","persistConfig","key","sagaMiddleware","middleware","reducer","state","action","type","undefined","persistedReducer","store","window","__REDUX_DEVTOOLS_EXTENSION__","persistor","run"],"sources":["/Users/sajithliyanage/Documents/whatsapp/whatsapp/src/store.tsx"],"sourcesContent":["import { applyMiddleware, createStore, compose } from \"redux\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport rootReducer from \"./state\";\nimport { watcherSaga } from \"./state/rootSaga\";\n//import { RESET_STATE } from \"./state/user/types\";\n\nconst initialState = {};\n\nconst persistConfig = {\n\tkey: \"persist-root\",\n\tstorage: storage\n};\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst middleware = [sagaMiddleware];\n\n/**\n * Clear store when user successfully signout from the app.\n */\nconst reducer = (state, action) => {\n\tif (action.type !== null) {\n\t\treturn rootReducer(state, action);\n\t} else {\n\t\treturn rootReducer(undefined, {});\n\t}\n};\n\n/**\n * Persist state in local storage.\n */\nconst persistedReducer = persistReducer(persistConfig, reducer);\n\nconst store = createStore(\n\tpersistedReducer,\n\tinitialState,\n\tcompose(\n\t\tapplyMiddleware(...middleware),\n\t\twindow.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n\t)\n);\nconst persistor = persistStore(store);\n\nsagaMiddleware.run(watcherSaga);\nexport default store;\nexport { persistor };\n"],"mappings":"AAAA,SAASA,eAAe,EAAEC,WAAW,EAAEC,OAAO,QAAQ,OAAO;AAC7D,SAASC,YAAY,EAAEC,cAAc,QAAQ,eAAe;AAC5D,OAAOC,OAAO,MAAM,2BAA2B;AAC/C,OAAOC,oBAAoB,MAAM,YAAY;AAE7C,OAAOC,WAAW,MAAM,SAAS;AACjC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C;;AAEA,MAAMC,YAAY,GAAG,CAAC,CAAC;AAEvB,MAAMC,aAAa,GAAG;EACrBC,GAAG,EAAE,cAAc;EACnBN,OAAO,EAAEA;AACV,CAAC;AAED,MAAMO,cAAc,GAAGN,oBAAoB,CAAC,CAAC;AAE7C,MAAMO,UAAU,GAAG,CAACD,cAAc,CAAC;;AAEnC;AACA;AACA;AACA,MAAME,OAAO,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EAClC,IAAIA,MAAM,CAACC,IAAI,KAAK,IAAI,EAAE;IACzB,OAAOV,WAAW,CAACQ,KAAK,EAAEC,MAAM,CAAC;EAClC,CAAC,MAAM;IACN,OAAOT,WAAW,CAACW,SAAS,EAAE,CAAC,CAAC,CAAC;EAClC;AACD,CAAC;;AAED;AACA;AACA;AACA,MAAMC,gBAAgB,GAAGf,cAAc,CAACM,aAAa,EAAEI,OAAO,CAAC;AAE/D,MAAMM,KAAK,GAAGnB,WAAW,CACxBkB,gBAAgB,EAChBV,YAAY,EACZP,OAAO,CACNF,eAAe,CAAC,GAAGa,UAAU,CAAC,EAC9BQ,MAAM,CAACC,4BAA4B,IAAID,MAAM,CAACC,4BAA4B,CAAC,CAC5E,CACD,CAAC;AACD,MAAMC,SAAS,GAAGpB,YAAY,CAACiB,KAAK,CAAC;AAErCR,cAAc,CAACY,GAAG,CAAChB,WAAW,CAAC;AAC/B,eAAeY,KAAK;AACpB,SAASG,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}